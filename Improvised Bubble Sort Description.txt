AUTHOR - AKASH THAKUR

BTECH IT - 2ND YEAR  SRM UNIVERSITY


                                          ALGORITHM - BUBBLE SORT IN ARRAYS


In this paper i have provided a small change which if we make in bubble sort algorithm can improve it's memory and time complexity.

In bubble sort we compare two consequtive values in array AND SWAP THEM ACCORDING TO THE NEED (ASCENDING AND DESCENDING). 
This bubbling goes on for all the consecutive values in array in one single loop. This loop which includes the bubbling and
swapping algorithm runs n times where n is the size of array.

#Bubbling refers to comparision of consequtive elements of array to check if they need to be swappewd or not


TRADITIONAL CODE FOR BUBBLE SORT 

// language c++




#include <iostream>
using namespace std;


int main() {
    int n;
    cout<<"Enter the size of Array";
    cin>>n;
    
    int A[n];
    
    cout<<"Enter the values in array";
    
    for (int i=0;i<n;i++)
        cin>>A[i];
    
   

     for (int a=0;a<n;a++)
    {for(int b=0;b<n-1;b++)
    {       if(A[b]>A[b+1])
            {
        A[b]=A[b]+A[b+1];
        A[b+1]=A[b]-A[b+1];
        A[b]=A[b]-A[b+1];
    
            }

    }
    }
    
 
    cout<<"\n  Sorted Array is ";
    for(int c=0;c<n;c++)
        cout<<A[c];
    
    return 0;
}






IMROVISED ALGORITHM 



TRADITIONAL CODE FOR BUBBLE SORT 

// language c++




#include <iostream>
using namespace std;


int main() {
    int n,FLAG=0;
    cout<<"Enter the size of Array";
    cin>>n;
    
    int A[n];
    
    cout<<"Enter the values in array";
    
    for (int i=0;i<n;i++)
        cin>>A[i];
    
   

    for (int a=0;a<n;a++)
    {

	for(int b=0;b<n-1;b++)
    
	{       if(A[b]>A[b+1])

            {FLAG=1;

        A[b]=A[b]+A[b+1];
        A[b+1]=A[b]-A[b+1];
        A[b]=A[b]-A[b+1];
    
            }

    

	}
	if(FLAG==0)
	break;
	else
	FLAG=0;

    }
    
 
    cout<<"\n  Sorted Array is ";
    for(int c=0;c<n;c++)
        cout<<A[c];
    
    return 0;
}




This algorithm saves memory and time required sort when our input is of the order of millions.
We take a flaf variable which checks that during one complete bubbling cycle did any swapping happened or not. If swapping happened it implies that our array is still 
unsorted. And if no swapping happened during bubbling this implies that array has got sorted and we need not to perform any other checking. Our flag variable doesnt change the value and if condition makes the loop to break and program completes sucessfully.






